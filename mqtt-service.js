/**
 * MQTT service module
 * @param serviceName (string) Name of the service
 * @param mqttConfig  (object) {
 *   handle: 'mqtt://example.com:123',
 *   username: 'Billy',
 *   password: 'VerySecretThingy'
 *   domain: 'smoothmining'
 * }
 */
var EventEmitter = require('events').EventEmitter;
function mqttService(serviceName, mqttConfig) {
  EventEmitter.call(this);
  var _self = this;

  this.serviceName = serviceName;

  // The domain topic as prefix for all other topics
  this.domainTopic = mqttConfig.domain + mqttConfig.domain.substr(mqttConfig.domain.length-1) == '/' ? '' : '/'; // Add trailing slash if not there
  
  // Topic used to publihs data about the service script itself
  this.systemTopic = this.domainTopic + 'services/' + this.serviceName + '/';

  // Topic used to publish data generated by the service script
  this.serviceTopic = this.domainTopic + this.serviceName + '/';

  // Connect to the MQTT broker
  this.broker = mqtt.connect(mqttConfig.handle, {
    username: mqttConfig.username,
    password: mqttConfig.password,
    
    // Let broker update service status to `stopped` on disconnect
    will: {
      topic: _self.serviceTopic + 'status',
      payload: JSON.stringify({
        time: new Date(),
        value: 'stopped'
      }),
      qos: 2,
      retain: true
    }
  }).on('connect', function () {
    // Update broker status to `running` on connect
    this.publish(_self.serviceTopic + 'status', _self.message('running'), {qos: 2, retain: true});
  });
}
  mqttService.prototype = Object.create(EventEmitter.prototype);

  /**
   * Helper to create the message string with added time property
   */
  mqttService.prototype.message = function(message) {
    return JSON.stringify({
      time: new Date(),
      value: message
    });
  }

  /**
   * Publishes a message containing data generated by the service
   * Usage:
   * .publish('sensor1value', 'high');
   * Will publish:
   * /myDomain/myServiceName/sensor1value `high`
   */
  mqttService.prototype.publish = function(topic, message) {
    this.broker.publish(_self.serviceTopic + topic, _self.message(message), {qos: 2, retain: true});
  }

module.exports = mqttService;