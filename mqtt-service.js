/**
 * MQTT service module
 * @param serviceName (string) Name of the service
 * @param mqttConfig  (object) {
 *   handle: 'mqtt://example.com:123',
 *   username: 'Billy',
 *   password: 'VerySecretThingy'
 *   domain: 'epicoperation'
 * }
 */

/**
 * Dependencies
 */
var EventEmitter = require('events').EventEmitter;
var mqtt = require('mqtt');

function MQTTService(serviceName, mqttConfig) {
  EventEmitter.call(this);
  var _self = this;

  this.serviceName = serviceName;

  // The domain topic as prefix for all other topics
  this.domainTopic = mqttConfig.domain + (mqttConfig.domain.substr(mqttConfig.domain.length-1) == '/' ? '' : '/'); // Add trailing slash if not there
  
  // Topic used to publish data about the service script itself
  this.systemTopic = this.domainTopic + 'services/' + this.serviceName + '/';

  this.setPublishPrefix('');

  // Connect to the MQTT broker
  this.broker = mqtt.connect(mqttConfig.handle, {
    username: mqttConfig.username,
    password: mqttConfig.password,
    
    // Let broker update service status to `stopped` on disconnect
    will: {
      topic: _self.systemTopic + 'status',
      payload: 'stopped',
      qos: 2,
      retain: true
    }
  })
  .on('connect', function () {
    console.log('MQTT connected');

    // Update broker status to `running` on connect
    this.publish(_self.systemTopic + 'status', 'running', {qos: 2, retain: true});

    // Subscribe
    this.subscribe(_self.systemTopic + '#');
    console.log('Subscribed to system topic: ', _self.systemTopic)
  })
  .on('message', function (topic, message) {
    message = message.toString()
    if('{['.indexOf(message.substr(0, 1)) != -1) message = JSON.parse(message)

    // Remove domain topic
    var topic = topic.replace(_self.domainTopic, '');

    // Passthrough original message
    _self.emit('message', topic, message);

    // Emit topic event to allow for listening to a specific topic
    _self.emit(topic, message);
    
    // Check whether the message is command for the service to do something
    if(topic.indexOf(_self.systemTopic) != -1) {
      _self.emit('command', message);
    }
  })
}
  MQTTService.prototype = Object.create(EventEmitter.prototype);

  /**
   * Publishes a message containing data generated by the service
   * Usage:
   * .publish('sensor1value', 'high');
   * Will publish:
   * /myDomain/outputTopic/sensor1value `high`
   */
  MQTTService.prototype.publish = function(topic, payload) {
    if(typeof payload == 'object')
      payload = JSON.stringify(payload);
    
    this.broker.publish(this.publishTopic + topic, payload.toString(), {qos: 2, retain: true});

    return this;
  }

  /**
   * Sets the output topic that the publish function above uses as prefix
   */
  MQTTService.prototype.setPublishPrefix = function(publishPrefix) {
    this.publishTopic = this.domainTopic + publishPrefix + (publishPrefix ? '/' : '');
    
    return this;
  }

  /**
   * Subscribe to topic
   */
  MQTTService.prototype.subscribe = function(topic) {
    const subscriptionTopic = this.domainTopic + topic
    this.broker.subscribe(subscriptionTopic)

    console.log(`Subscribed to ${subscriptionTopic}`)
    
    return this
  }

module.exports = MQTTService;